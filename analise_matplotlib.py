# -*- coding: utf-8 -*-
"""Analise_matplotlib.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1n-Amos-OSvXp--YhAiAzOk604T47-08f
"""

import plotly.express as px
import matplotlib.pyplot as plt

px.data.gapminder() #dataset sobre a renda per capita de países

df = px.data.gapminder().query('country == "Brazil"').set_index('year') 

#pegar só os dados do Brasil e ordenar pelo ano

df.head()

plt.plot(df.index, df['gdpPercap']) #renda per capita por ano

plt.title('PIB per capita do Brasil') #título do gráfico
plt.ylabel('PIB per capita') #nome para eixo y
plt.xlabel('Tempo') #nome para eixo x

title = 'Relação entre expectativa de vida e renda per capita no Brasil'

plt.figure(figsize = (12, 4))
plt.scatter(df['lifeExp'], df['gdpPercap'], cmap= 'viridis') #eixo x, eixo y
plt.xlabel('Expectativa de vida')
plt.ylabel('Renda per capita')
plt.title(title, loc = 'left')
plt.show()

#gráfico de barras

plt.bar(x = df.index,
        height = df['pop'],
        color = 'red')
#população por ano, x = anos, 'altura' = valor da população 

plt.title('População Brasileira')

"""Criando funções de filtro"""

def filtrar_continente(continente):
  df = px.data.gapminder()
  df = df[df['continent'] == continente] #filtro para o continente passado como parâmetro
  return df

def filtrar_pais(pais, variavel):
  'Filtra alguma variavel "pop", "gdlPercap" e "lifeExp"'
  df = px.data.gapminder()
  df = df[df['country'] == pais][variavel] #pega as informações do pais passado na coluna da variavel escolhida
  return df

americas = filtrar_continente('Americas')
paises = americas['country'].unique() #pego uma vez o nome de cada país da América
plt.figure(figsize = (12, 8))

for pais in paises: #faz o gráfico pais por pais
#eixo x = lifeExp, eixo y = gdpPercap 
  plt.scatter(filtrar_pais(pais = pais, variavel = 'lifeExp'), filtrar_pais(pais = pais, variavel =  'gdpPercap'))

plt.legend(labels = paises, loc = 'best')

plt.title('Relação entre renda per capita e expctativa de vida', loc = 'left')
plt.xlabel('Expectativa de vida')
plt.ylabel('Renda per capita')