# -*- coding: utf-8 -*-
"""Analise_matplotlib_seaborn.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1n-Amos-OSvXp--YhAiAzOk604T47-08f
"""

import plotly.express as px
import matplotlib.pyplot as plt

px.data.gapminder() #dataset sobre a renda per capita de países

df = px.data.gapminder().query('country == "Brazil"').set_index('year') 

#pegar só os dados do Brasil e ordenar pelo ano

df.head()

plt.plot(df.index, df['gdpPercap']) #renda per capita por ano

plt.title('PIB per capita do Brasil') #título do gráfico
plt.ylabel('PIB per capita') #nome para eixo y
plt.xlabel('Tempo') #nome para eixo x

title = 'Relação entre expectativa de vida e renda per capita no Brasil'

plt.figure(figsize = (12, 4))
plt.scatter(df['lifeExp'], df['gdpPercap'], cmap= 'viridis') #eixo x, eixo y
plt.xlabel('Expectativa de vida')
plt.ylabel('Renda per capita')
plt.title(title, loc = 'left')
plt.show()

#gráfico de barras

plt.bar(x = df.index,
        height = df['pop'],
        color = 'red')
#população por ano, x = anos, 'altura' = valor da população 

plt.title('População Brasileira')

"""Criando funções de filtro"""

def filtrar_continente(continente):
  df = px.data.gapminder()
  df = df[df['continent'] == continente] #filtro para o continente passado como parâmetro
  return df

def filtrar_pais(pais, variavel):
  'Filtra alguma variavel "pop", "gdlPercap" e "lifeExp"'
  df = px.data.gapminder()
  df = df[df['country'] == pais][variavel] #pega as informações do pais passado na coluna da variavel escolhida
  return df

americas = filtrar_continente('Americas')
paises = americas['country'].unique() #pego uma vez o nome de cada país da América
plt.figure(figsize = (12, 8))

for pais in paises: #faz o gráfico pais por pais
#eixo x = lifeExp, eixo y = gdpPercap 
  plt.scatter(filtrar_pais(pais = pais, variavel = 'lifeExp'), filtrar_pais(pais = pais, variavel =  'gdpPercap'))

plt.legend(labels = paises, loc = 'best')

plt.title('Relação entre renda per capita e expctativa de vida', loc = 'left')
plt.xlabel('Expectativa de vida')
plt.ylabel('Renda per capita')

"""SEABORN"""

import pandas as pd
import numpy as np
import seaborn as sns

sns.set_theme(style = 'darkgrid')

#Base de dados de restaurante

base_dados = sns.load_dataset('tips')

#verificar

base_dados.head()

#renomeando as colunas

base_dados.rename(columns = {'total_bill' : 'Total_conta',
                             'tip' : 'Gorjeta', 
                             'sex' : 'Sexo', 
                             'smoker' : 'Fumante',
                             'day' : 'Dia',
                             'time' : 'Periodo',
                             'size' : 'Pessoas_mesa'}, inplace = True)

base_dados.head()

"""Gráfico relplot"""

sns.relplot(x = 'Total_conta', y = 'Gorjeta', data = base_dados)

#quanto maior o valor da conta, maior a gorjeta

sns.relplot(x = 'Total_conta', y = 'Gorjeta', data = base_dados, hue = 'Sexo')

#comando hue me deixa colocar uma legenda

sns.relplot(x = 'Total_conta', y = 'Gorjeta', data = base_dados, 
            kind = 'line', hue = 'Fumante')

#posso mudar o tipo do gráfico, nesse caso para linha

"""Gráfico Histplot"""

sns.histplot(data = base_dados, x = 'Total_conta')

#agrupa em intervalos o eixo x e faz a frequência

sns.histplot(data = base_dados, x = 'Total_conta', hue = 'Fumante')

#a mesma ideia da legenda aqui

"""Barplot"""

sns.barplot(data = base_dados, x = 'Sexo', y = 'Total_conta', hue = 'Fumante') 

#qual sexo gasta mais e se são fumantes

"""Pairplot"""

sns.pairplot(base_dados)

#pega cada coluna e plota ela com todas as demais

sns.pairplot(base_dados, hue = 'Sexo')

#também é possível colocar uma separação

"""Boxplot"""

sns.boxplot(data = base_dados, x = 'Dia', y = 'Total_conta')

#podemos ver que sábado é o dia que gasta mais e com maior outlier

sns.boxplot(data = base_dados, x = 'Dia', y = 'Total_conta', hue = 'Sexo')

#no sábado que é o dia que gasta mais, as mulheres que pagaram mais as contas